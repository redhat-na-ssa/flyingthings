apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: deploy-label-studio
spec:
  params:
    - name: GIT_URL
      default: https://github.com/redhat-na-ssa/flyingthings.git
      description: url of the git repo for the code of deployment
      type: string
    - name: GIT_REVISION
      default: main
      description: revision to be used from repo of the code for deployment
      type: string
    - name: NAMESPACE
      description: namespace for the deployment
      default: ml-demo
      type: string
    - name: LABELSTUDIO_IMAGE
      default: image-registry.openshift-image-registry.svc:5000/$(params.NAMESPACE)/labelstudio:latest
      description: image for label studio
      type: string
    - name: LABELSTUDIO_CONTEXT
      default: source/labelstudio
      description: dockerfile path 
      type: string
  tasks:
    - name: fetch-repository
      params:
        - name: url
          value: $(params.GIT_URL)
        - name: subdirectory
          value: ''
        - name: deleteExisting
          value: 'true'
        - name: revision
          value: $(params.GIT_REVISION)
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: source
    - name: build-label-studio
      params:
        - name: IMAGE
          value: $(params.LABELSTUDIO_IMAGE)
        - name: CONTEXT
          value: $(params.LABELSTUDIO_CONTEXT)
        - name: DOCKERFILE
          value: ./Dockerfile
      runAfter:
        - fetch-repository
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
        - name: source
          workspace: source
    - name: deploy-label-studio
      taskSpec:
        params:
          - default: oc help
            name: SCRIPT
            type: string
          - default: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
            name: IMAGE
            type: string
        steps:
          - env:
              - name: HOME
                value: /tekton/home
            image: $(params.IMAGE)
            name: oc
            resources: {}
            script: |
              #!/usr/bin/env bash
              $(params.SCRIPT)
              exit 0
      workspaces:
        - name: source
          workspace: source
      runAfter:
        - build-label-studio
      params:
      - name: NAMESPACE
        value: $(params.NAMESPACE)
      - name: SCRIPT
        value: |
          oc apply -f $(workspaces.source.path)/source/labelstudio/deployment.yaml \
          
          # oc new-app image-registry.openshift-image-registry.svc:5000/$(params.NAMESPACE)/labelstudio:latest \
          #   --name=labelstudio
          
          # oc set volume deployment/labelstudio \
          #   --add \
          #   --name=labelstudio-pvc \
          #   --type=persistentVolumeClaim \
          #   --claim-name=labelstudio-pvc \
          #   --mount-path=/opt/app-root/src/.local \
          #   --overwrite
          
          # oc apply -f - <<EOF
          # apiVersion: route.openshift.io/v1
          # kind: Route
          # metadata:
          #   name: labelstudio
          #   labels:
          #     app: labelstudio
          #     app.kubernetes.io/component: labelstudio
          #     app.kubernetes.io/instance: labelstudio
          # annotations:
          #   openshift.io/host.generated: "true"
          # spec:
          #   to:
          #     kind: Service
          #     name: labelstudio
          #     weight: 100
          #   port:
          #     targetPort: 8080-tcp
          #   tls:
          #     termination: edge
          #     insecureEdgeTerminationPolicy: Allow
          # EOF
  workspaces:
    - name: source
