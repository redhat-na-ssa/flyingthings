#############    Outgoing MQTT messaging 
# https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/mqtt/mqtt.html#_configuration_reference_2
mp.messaging.outgoing.liveObjectDetection.topic=liveObjectDetection
mp.messaging.outgoing.liveObjectDetection.host=artemis-mqtt-tls-0-svc-rte-user1-flying-djl.apps.den-east.ratwater.xyz
#mp.messaging.outgoing.liveObjectDetection.host=artemis-mqtt-tls-0-svc-rte-user1-flying-djl.apps.cluster-wqg4z.wqg4z.sandbox944.opentlc.com
mp.messaging.outgoing.liveObjectDetection.port=443
#mp.messaging.outgoing.liveObjectDetection.host=rht
#mp.messaging.outgoing.liveObjectDetection.port=1883
mp.messaging.outgoing.liveObjectDetection.username=djl
mp.messaging.outgoing.liveObjectDetection.password=djl
mp.messaging.outgoing.liveObjectDetection.client-id=${HOSTNAME:localhost}-out

# https://activemq.apache.org/components/artemis/documentation/latest/mqtt.html#mqtt-quality-of-service
mp.messaging.outgoing.liveObjectDetection.qos=0

# Keep size of image pushed to AMQ Broker via MQTT message to a configurable max
mp.messaging.outgoing.liveObjectDetection.max-message-size=1800000

# If image size of video frame exceeds max-message-size, then resize image to the following dimensions
org.acme.objectdetection.resize.image.width=640
org.acme.objectdetection.resize.image.height=480

# Enable the following if connecting to Artemis MQTT via a Passthrough TLS route
mp.messaging.outgoing.liveObjectDetection.ssl=true
mp.messaging.outgoing.liveObjectDetection.ssl.keystore.location=../.artemis_certs/client-ca-truststore.jks
mp.messaging.outgoing.liveObjectDetection.ssl.keystore.password=securepass
mp.messaging.outgoing.liveObjectDetection.ssl.truststore.location=../.artemis_certs/server-keystore.jks
mp.messaging.outgoing.liveObjectDetection.ssl.truststore.password=securepass



# ###########    Inbound MQTT notifications
mp.messaging.incoming.modelNotify.topic=model-update-notify
mp.messaging.incoming.modelNotify.host=artemis-mqtt-tls-0-svc-rte-user1-flying-djl.apps.den-east.ratwater.xyz
#mp.messaging.incoming.modelNotify.host=artemis-mqtt-tls-0-svc-rte-user1-flying-djl.apps.cluster-wqg4z.wqg4z.sandbox944.opentlc.com
mp.messaging.incoming.modelNotify.port=443
#mp.messaging.incoming.modelNotify.host=rht
#mp.messaging.incoming.modelNotify.port=1883
mp.messaging.incoming.modelNotify.username=djl
mp.messaging.incoming.modelNotify.password=djl
mp.messaging.incoming.modelNotify.client-id=${HOSTNAME:localhost}-mn

# Enable the following if connecting to Artemis MQTT via a Passthrough TLS route
mp.messaging.incoming.modelNotify.ssl=true
mp.messaging.incoming.modelNotify.ssl.keystore.location=../.artemis_certs/client-ca-truststore.jks
mp.messaging.incoming.modelNotify.ssl.keystore.password=securepass
mp.messaging.incoming.modelNotify.ssl.truststore.location=../.artemis_certs/server-keystore.jks
mp.messaging.incoming.modelNotify.ssl.truststore.password=securepass


#############     minio
quarkus.minio.rht.url=https://minio-user1-flying-djl.apps.den-east.ratwater.xyz
#quarkus.minio.rht.url=https://minio-user1-flying-djl.apps.cluster-wqg4z.wqg4z.sandbox944.opentlc.com
#quarkus.minio.rht.url=http://rht:9000
quarkus.minio.rht.access-key=minio
quarkus.minio.rht.secret-key=minio123



##  Application

####  Application:  model 

# The following is optional.
#   If not specified, then default model (specific for ONNX engine) from DJL ModelZoo will be downloaded at start-up
#org.acme.djl.model.zip.path=${HOME}/Downloads/ml/trains
org.acme.djl.model.zip.name=trains-yolov5s.zip
org.acme.djl.model.artifact.name=nscale.onnx
org.acme.djl.model.synset.name=classes.txt

# Name of S3 bucket and subPath where model could optionally be pushed to
com.rht.na.gtm.s3.bucket.name=flyingthings



####  Application:  model validation
# Specify path to a known video frame that can validate model upon loading
#  should pass
org.acme.objectdetection.test.video.frame.path=${HOME}/Downloads/ml/trains/unAdulteredImage-1691155298.png

#  should fail
#org.acme.objectdetection.test.video.frame.path=${HOME}/Downloads/ml/trains/unAdulteredImage-1691156477.png


####  Application:  video capture
# Execute the following to determine info about your webcam:
#    $ v4l2-ctl --list-devices
#
# The first entry in the list is the device id to specify here
org.acme.objectdetection.video.capture.device.id=4

# Alternatively, specify a video file to inference on (instead of a video device)
#org.acme.objectdetection.video.file=${HOME}/Downloads/ml/flyingthings/plane02.m4v
#org.acme.objectdetection.video.file=${HOME}/Downloads/ml/trains/output_video.mp4



####  Application:  model inference
# Time (in seconds) to delay video capture analysis once start-up of Quarkus edge app begins
# Default is 10 seconds (optimal for edge device such as Pi4 with limited resources)
org.acme.objectdetection.initial.capture.delay.seconds=10s

# Time (in millis) that edge device will pull from video capture device buffer. Executes on its own thread.
# Default is 50 millis.  (optimal for a simple low-end webcam tethered to an edge device such as Pi4 with limited resources)
org.acme.objectdetection.video.capture.interval.millis=50

# Time (in seconds) that edge device will execute model-based prediction analysis on a captured video frame.
# Default is 2 seconds (optimal for edge device such as Pi4 with limited resources)
org.acme.objectdetection.delay.between.evaluation.seconds=2s
quarkus.vertx.warning-exception-time=${org.acme.objectdetection.delay.between.evaluation.seconds}
quarkus.vertx.max-event-loop-execute-time=${org.acme.objectdetection.delay.between.evaluation.seconds}

# Whether to write the video frame with object detection bounding boxes (as determined by the model) to local disk on the edge device
org.acme.objectdetection.write.modified.image.to.disk=false


####  Application:  corrective candidates
# Minimum probability threshold that all detected objects on a video frame should meet, otherwise flag the video frame as a candidate to re-train/re-calibratete the model
org.acme.objectdetection.correction.candidate.best.probability.threshold=0.80




# Other app props.  Please do not modify:
org.acme.djl.resource=LiveObjectDetectionResource
#org.acme.djl.prediction.producer=MockPredictionProducer
org.acme.djl.prediction.producer=MQTTPredictionProducer



######  Health Check
quarkus.rest-client.iHealth.url=http://localhost:${quarkus.http.port}




################     Logging
quarkus.log.level=INFO
quarkus.log.min-level=DEBUG
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=false

quarkus.log.category."ai.djl".level=DEBUG
quarkus.log.category."org.acme.apps".level=DEBUG



#######     Other
offline=true
quarkus.devservices.enabled=false
quarkus.http.host=0.0.0.0
