#############    Outgoing MQTT messaging 
# https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/mqtt/mqtt.html#_configuration_reference_2
mp.messaging.outgoing.liveObjectDetection.topic=liveObjectDetection
#mp.messaging.outgoing.liveObjectDetection.host=192.168.1.221
mp.messaging.outgoing.liveObjectDetection.host=rht
mp.messaging.outgoing.liveObjectDetection.port=1883
mp.messaging.outgoing.liveObjectDetection.username=djl
mp.messaging.outgoing.liveObjectDetection.password=djl
mp.messaging.outgoing.liveObjectDetection.client-id=${HOSTNAME:localhost}-out
mp.messaging.outgoing.liveObjectDetection.qos=1


# ###########    Inbound MQTT notifications
mp.messaging.incoming.modelNotify.topic=djl-model-notify
mp.messaging.incoming.modelNotify.host=localhost
mp.messaging.incoming.modelNotify.port=1883
mp.messaging.incoming.modelNotify.username=djl
mp.messaging.incoming.modelNotify.password=djl
mp.messaging.incoming.modelNotify.client-id=${HOSTNAME:localhost}-mn


#############     minio
quarkus.minio.rht.url=http://rht:9000
quarkus.minio.rht.access-key=minio
quarkus.minio.rht.secret-key=minio123



##  Application

####  Application:  model 
#org.acme.djl.model.zip.path=${HOME}/Downloads/ml/flyingthings
#org.acme.djl.model.zip.name=flyingthings-yolov5s.zip
#org.acme.djl.model.artifact.name=flyingthings_yolov5s.onnx

org.acme.djl.model.zip.path=${HOME}/Downloads/ml/trains
org.acme.djl.model.zip.name=trains-yolov5s.zip
org.acme.djl.model.artifact.name=nscale.onnx
org.acme.djl.model.synset.name=classes.txt

# Name of S3 bucket where model could optionally be pushed to
com.rht.na.gtm.s3.bucket.name=flyingthings-models



####  Application:  model validation
# Specify path to a known video frame that can validate model upon loading
#  should pass
org.acme.objectdetection.test.video.frame.path=${HOME}/Downloads/ml/trains/unAdulteredImage-1691155298.png

#  should fail
#org.acme.objectdetection.test.video.frame.path=${HOME}/Downloads/ml/trains/unAdulteredImage-1691156477.png


####  Application:  video capture
# Execute the following to determine info about your webcam:
#    $ v4l2-ctl --list-devices
#
# The first entry in the list is the device id to specify here
#org.acme.objectdetection.video.capture.device.id=0

# Alternatively, specify a video file to inference on (instead of a video device)
#org.acme.objectdetection.video.file=${HOME}/Downloads/ml/flyingthings/plane02.m4v
org.acme.objectdetection.video.file=${HOME}/Downloads/ml/trains/output_video.mp4



####  Application:  model inference
# Time (in seconds) to delay video capture analysis after once start-up of Quarkus edge app begins
# Default is 10 seconds (optimal for edge device such as Pi4 with limited resources)
org.acme.objectdetection.initial.capture.delay.seconds=10s

# Time (in millis) that edge device will pull from video capture device buffer. Executes on its own thread.
# Default is 50 millis.  (optimal for a simple low-end webcam tethered to an edge device such as Pi4 with limited resources)
org.acme.objectdetection.video.capture.interval.millis=50

# Time (in seconds) that edge device will execute model-based prediction analysis on a captured video frame.
# Default is 2 seconds (optimal for edge device such as Pi4 with limited resources)
org.acme.objectdetection.delay.between.evaluation.seconds=2s

# Whether to write the video frame with object detection bounding boxes (as determined by the model) to local disk on the edge device
org.acme.objectdetection.write.modified.image.to.disk=false


####  Application:  corrective candidates
# Minimum probability threshold that all detected objects on a video frame should meet, otherwise flag the video frame as a candidate to re-train/re-calibratete the model
org.acme.objectdetection.correction.candidate.probability.threshold=0.80




# Other app props.  Please do not modify:
org.acme.djl.resource=LiveObjectDetectionResource
#org.acme.djl.prediction.producer=MockPredictionProducer
org.acme.djl.prediction.producer=MQTTPredictionProducer




################     Logging
quarkus.log.level=INFO
quarkus.log.min-level=DEBUG
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=false

quarkus.log.category."ai.djl".level=DEBUG
quarkus.log.category."org.acme.apps".level=DEBUG



#######     Other
offline=true
quarkus.devservices.enabled=false
quarkus.http.host=0.0.0.0
